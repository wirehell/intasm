use std::str::FromStr;

use crate::lexer::LexicalError;
use crate::lexer::Token;
use crate::ast::{Statement, Directive, Program, Instruction, Word, Expression, Constant, ReadParameter,
WriteParameter, Declaration, DataValue };

grammar;

pub Stmt : Statement = {
    <d:DirectiveStmt>   LineEnd+                            => Statement::DirectiveStatement(d),
    <l:LabelDecl?>      <i:InstructionStmt> <le:LineEnd+>   => Statement::InstructionStatement(l, i),
    <l:LabelDecl?>      <d:DeclarationStmt> <le:LineEnd+>   => Statement::DeclarationStatement(l, d),
}

pub DirectiveStmt : Directive = {
    "#" "def" <s:String> <n:Expr>   => Directive::Def(s, n),
    "#" "foo"                       => Directive::Foo,
}

pub LabelDecl : String = {
    "." <l:String>  => l,
}

pub Expr :Expression = {
    <e1:Expr> "+" <e2:Term> => Expression::Plus(Box::new(e1), Box::new(e2)),
    <e1:Expr> "-" <e2:Term> => Expression::Minus(Box::new(e1), Box::new(e2)),
    <t:Term>                => t,
}
pub Term :Expression = {
    <t1:Term> "*" <t2:Factor>   => Expression::Multiplication(Box::new(t1), Box::new(t2)),
    <f:Factor>                  => f,
}
pub Factor :Expression = {
    "-" <f:Factor>       => Expression::UnaryMinus(Box::new(f)),
    <v:ValueExpr>        => v,
}

pub ValueExpr :Expression = {
    <n:Number>      => Expression::Number(n),
    <s:String>      => Expression::Constant(s),
    "(" <e:Expr> ")"    => e
}

pub ReadParameterExpr : ReadParameter = {
            <v:Expr>        => ReadParameter::ReadImm(v),
        "[" <v:Expr> "]"    => ReadParameter::ReadPos(v),
    "%" "[" <v:Expr> "]"    => ReadParameter::ReadRel(v),
}

pub WriteParameterExpr : WriteParameter = {
        "[" <v:Expr> "]"    => WriteParameter::WritePos(v),
    "%" "[" <v:Expr> "]"    => WriteParameter::WriteRel(v),
}

pub DataDef : DataValue = {
    <s:QuotedString>    => DataValue::DataString(s),
    <e:Expr>            => DataValue::DataExpression(e),
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub InstructionStmt : Instruction = {
    "halt"                          => Instruction::Halt,
    "spa" <v:Expr>                  => Instruction::Spa {val: v},
    "in"  <v:WriteParameterExpr>    => Instruction::In {dst: v},
    "out" <v:ReadParameterExpr>     => Instruction::Out {src: v},
    "add" <op1:ReadParameterExpr> "," <op2:ReadParameterExpr> "," <dst:WriteParameterExpr> => Instruction::Add {op1, op2, dst },
    "mul" <op1:ReadParameterExpr> "," <op2:ReadParameterExpr> "," <dst:WriteParameterExpr> => Instruction::Mul {op1, op2, dst },
    "eq"  <op1:ReadParameterExpr> "," <op2:ReadParameterExpr> "," <dst:WriteParameterExpr> => Instruction::Eq {op1, op2, dst },
    "lt"  <op1:ReadParameterExpr> "," <op2:ReadParameterExpr> "," <dst:WriteParameterExpr> => Instruction::Lt {op1, op2, dst },
    "jit" <cond:ReadParameterExpr> "," <target:Expr> => Instruction::Jit { cond, target },
    "jif" <cond:ReadParameterExpr> "," <target:Expr> => Instruction::Jif { cond, target },
}

pub DeclarationStmt : Declaration = {
    "dw"  <l:Comma<DataDef>>              => Declaration::Dw(l),
    "dup" <count:Expr> "," <value:Expr>   => Declaration::Dup(count, value),
}

pub Stmts : Program = {
    <s:Stmt+> => Program { statements: s}
}

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        LineEnd => Token::LineEnd,
        "#"     => Token::Hash,
        "."     => Token::Period,
        ","     => Token::Comma,
        "["     => Token::LBracket,
        "]"     => Token::RBracket,
        "("     => Token::LParen,
        ")"     => Token::RParen,
        "*"     => Token::Asterix,
        "+"     => Token::Plus,
        "-"     => Token::Minus,
        "%"     => Token::Percent,
        QuotedString => Token::QuotedString(<String>),
        String  => Token::StringLiteral(<String>),
        Number  => Token::NumberLiteral(<Word>),
        // Directives
        "def"   => Token::Def,
        "foo"   => Token::Foo,
        // Instructions
        "add"   => Token::Add,
        "mul"   => Token::Mul,
        "in"    => Token::In,
        "out"   => Token::Out,
        "jit"   => Token::Jit,
        "jif"   => Token::Jif,
        "lt"    => Token::Lt,
        "eq"    => Token::Eq,
        "halt"  => Token::Halt,
        "spa"   => Token::Spa,
        // Declarations
        "dw"    => Token::Dw,
        "dup"   => Token::Dup,
    }
}
